<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="service.xml" />

	<bean id="service.appTestFacebookTokenService" class="mobi.nowtechnologies.server.service.social.facebook.impl.mock.AppTestFacebookTokenService" />
	<bean id="service.facebookOperationsAdaptor" class="mobi.nowtechnologies.server.service.social.facebook.impl.mock.AppTestFacebookOperationsAdaptor" />

    <bean id="service.VersionService" class="mobi.nowtechnologies.server.service.VersionService">
        <property name="manifest" value="classpath:TEST-MANIFEST.MF" />
    </bean>


	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application-test.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

    <bean id="serviceReloadableResourceBundleMessageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:services_test</value>
            </list>
        </property>
        <property name="defaultEncoding" value="utf-8" />
        <property name="fileEncodings" value="utf-8" />
        <property name="cacheSeconds" value="180" />
        <property name="useCodeAsDefaultMessage" value="true" />
    </bean>
	
	<bean id="service.MailService" class="mobi.nowtechnologies.server.service.MailService">
		<property name="mailSession" ref="service.MailSession" />
	</bean>

	<bean id="service.MailSession"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass">
			<value>javax.mail.Session</value>
		</property>
		<property name="targetMethod">
			<value>getDefaultInstance</value>
		</property>
		<property name="arguments">
			<list>
				<props>
					<prop key="mail.debug">false</prop>
					<prop key="mail.transport.protocol">smtp</prop>
					<prop key="mail.smtp.auth">false</prop>
					<prop key="mail.smtp.user"></prop>
					<prop key="mail.smtp.password"></prop>
					<prop key="mail.smtp.host">panda</prop>
					<prop key="mail.smtp.port">25</prop>
					<prop key="mail.smtp.from">info@musicqubed.com</prop>
				</props>
			</list>
		</property>
	</bean>
	
	<bean id="service.WeeklyUpdateService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject">
     	    <bean class="mobi.nowtechnologies.server.service.WeeklyUpdateService">
				<property name="userService" ref="service.UserService" />
			</bean>
     	</property>
  	</bean>

    <bean id="vf_nz.service.SmsProviderSpy" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
        <property name="realObject" ref="vf_nz.service.VFNZSMSGatewayService"/>
    </bean>

    <alias name="vf_nz.service.SmsProviderSpy" alias="vf_nz.service.SmsProvider"/>
  	
	<bean id="service.SpyPaymentDetailsService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.PaymentDetailsService"/>
  	</bean>
  	
	<bean id="service.SpyUserService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.UserService"/>
  	</bean>

	<bean id="service.SpyEntityService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.EntityService"/>
  	</bean>
  	
	<bean id="service.SpySagePayPaymentService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.sagePayPaymentService"/>
  	</bean>
  	
	<bean id="service.SpyPayPalPaymentService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.payPalPaymentService"/>
  	</bean>
  	
	<bean id="service.SpyO2PaymentService" class="mobi.nowtechnologies.server.shared.MockitoSpyFactoryBean">
     	<property name="realObject" ref="service.o2PaymentService"/>
  	</bean>

	<bean id="postService" class="mobi.nowtechnologies.server.apptests.ITunesPostService"/>
	
	<bean id="service.ITunesClient" class="mobi.nowtechnologies.server.service.itunes.impl.ITunesClientImpl">
		<property name="httpOkCode" value="#{T(org.springframework.http.HttpStatus).OK.value()}"/>
		<property name="postService" ref="postService"/>
		<property name="iTunesResponseParser" ref="iTunesResponseParser"/>
	</bean>

	<bean id="service.ITunesService" class="mobi.nowtechnologies.server.service.itunes.impl.ITunesServiceImpl">
		<property name="iTunesClient" ref="service.ITunesClient"/>
		<property name="iTunesPaymentService" ref="service.iTunesPaymentService"/>
		<property name="messageSource" ref="serviceMessageSource"/>
    </bean>


	<bean id="service.PayPalHttpService" class="mobi.nowtechnologies.server.service.payment.http.PayPalHttpService">
		<property name="apiUrl" value="${paypal.apiUrl}" />
		<property name="postService" ref="payPalPostService" />
		<property name="request" ref="request.payPalRequest" />
	</bean>

	<bean id="payPalPostService" class="mobi.nowtechnologies.server.apptests.paypal.PayPalPostService"/>

</beans>
