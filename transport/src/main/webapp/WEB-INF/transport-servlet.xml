<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<mvc:interceptors>
		<bean class="mobi.nowtechnologies.server.interceptor.LoggerInterceptor" />
	</mvc:interceptors>
	
	<mvc:annotation-driven />
	
	
	<!-- Application properties     -->
	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
				<value>file:#{systemProperties['catalina.base']}/conf/application.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

	<bean class="mobi.nowtechnologies.server.config.WebConfigPostProcessor"/>

	<bean id="transport.JaxbMarshallingView" class="org.springframework.web.servlet.view.xml.MarshallingView">
		<constructor-arg ref="transport.JaxbMarshaller" />
		<property name="contentType" value="application/xml;charset=UTF-8" />
	</bean>

	<bean id="transport.JaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>mobi.nowtechnologies.server.shared.dto.ChartDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.AccountLog</value>
				<value>mobi.nowtechnologies.server.shared.dto.AccountCheckDTO</value>
				<value>mobi.nowtechnologies.server.shared.dto.NewsDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.NewsDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.BonusChartDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.ChartDetailDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.Response</value>
				<value>mobi.nowtechnologies.server.persistence.domain.DeviceSet</value>
				<value>mobi.nowtechnologies.server.shared.dto.DrmDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.DrmItemDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.SetPassword</value>
				<value>mobi.nowtechnologies.server.shared.dto.BuyTrackDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.ErrorMessage</value>
				<value>mobi.nowtechnologies.server.persistence.domain.UserRegInfoServer</value>
				<value>mobi.nowtechnologies.server.persistence.domain.PaymentPolicy</value>
				<value>mobi.nowtechnologies.server.shared.dto.PromoCodeDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PaymentPolicyDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PurchasedChartDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PurchasedChartDto</value>
			</list>
		</property>
	</bean> 
		
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	  <property name="order" value="1" />
	  <property name="mediaTypes">
		<map>
		   <entry key="xml" value="text/xml"/>
		   <entry key="html" value="text/html"/>
		   <entry key="json" value="application/json" />
		</map>
	  </property>
 	<property name="viewResolvers">
		<list>
			<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
		</list>
	</property>
	  <property name="defaultViews">
		<list>
		  <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
		  <ref bean="transport.JaxbMarshallingView"/>
		 </list>
	  </property>
	</bean>

	<!-- <bean id="log4jInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> 
		<property name="targetClass" value="org.springframework.util.Log4jConfigurer" 
		/> <property name="targetMethod" value="initLogging" /> <property name="arguments"> 
		<list> <value>conf/log4j.properties</value> </list> </property> </bean> -->

	<!--
		 ****************************************************************************
		 ****************** Automatic job and thread-pool executors *****************
		 ****************************************************************************
	-->
	
		<!--	Sms According To Law job-->
	<bean id="transport.smsAccordingToLawQuartzJobDetail"
		class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="mobi.nowtechnologies.server.job.SmsAccordingToLawJob" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="runningtrax" />
				<entry key="userService" value-ref="service.UserService" />
				<entry key="messageSource" value-ref="serviceMessageSource" />
				<entry key="migHttpService" value-ref="service.migHttpService" />
				<entry key="communityService" value-ref="service.communityService" />
			</map>
		</property>
	</bean>
	
<!--	<bean id="transport.smsAccordingToLawNowTop40QuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">-->
<!--		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />-->
<!--		<property name="startDelay"-->
<!--			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />-->
<!--		<property name="repeatInterval"-->
<!--			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />-->
<!--		<property name="jobDataAsMap">-->
<!--			<map merge="true">-->
<!--				<entry key="communityURL" value="nowtop40" />-->
<!--			</map>-->
<!--		</property>-->
<!--	</bean>-->
	
	<bean id="transport.smsAccordingToLawMoboQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="mobo" />
			</map>
		</property>
	</bean>

	<bean id="transport.smsAccordingToLawMetalHammerQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="MetalHammer" />
			</map>
		</property>
	</bean>
	
	<bean id="transport.smsAccordingToLawSamsungQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="samsung" />
			</map>
		</property>
	</bean>
	
	<bean id="transport.smsAccordingToLawRunningTraxQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="runningtrax" />
			</map>
		</property>
	</bean>
	
	<bean id="transport.smsAccordingToLawChartsNowQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="ChartsNow" />
			</map>
		</property>
	</bean>

	<bean id="transport.notificationJob" class="mobi.nowtechnologies.server.job.NotificationJob">
		<property name="numberOfThreads" value="${notificationJob.numberOfThreads}" />
		<property name="keystore" value="${notificationJob.keystore}" />
		<property name="password" value="${notificationJob.password}" />
		<property name="production" value="${notificationJob.production}" />
		<property name="communityName" value="Now Music" />
		<property name="userIPhoneDetailsService" ref="service.UserIPhoneDetailsService" />
	</bean>


	<bean id="transport.notificationQuartzJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="transport.notificationJob" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="transport.notificationQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.notificationQuartzJobDetail" />
		<property name="startDelay" value="${notificationQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval" value="${notificationQuartzTrigger.repeatIntervalMillis}" />
	</bean>
	
	<bean id="paymentExecutor" class="mobi.nowtechnologies.server.job.executor.PendingPaymentExecutor">
		<property name="executor">
			<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
				<property name="corePoolSize" value="${executor.corePoolSize}" />
				<property name="maxPoolSize" value="${executor.maxPoolSize}" />
				<property name="queueCapacity" value="${executor.queueCapacity}" />
			</bean>
		</property>
		<property name="paymentSystems" ref="service.map.paymentSystems" />
	</bean>
	
	<!-- Payment task -->
	<bean id="paymentTask" class="mobi.nowtechnologies.server.job.CreatePendingPaymentJob">
		<property name="executor" ref="paymentExecutor" />
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
	</bean>
	<bean id="paymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="paymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="paymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="paymentJob" />
    	<property name="startDelay" value="${payment.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${payment.job.repeatIntervalMillis}" />
	</bean>
	
	<!-- Retry Payment task -->
	<bean id="retryPaymentTask" class="mobi.nowtechnologies.server.job.CreateRetryPaymentJob">
		<property name="executor" ref="paymentExecutor" />
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
	</bean>
	<bean id="retryPaymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="retryPaymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" /> 
	</bean>
	<bean id="retryPaymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="retryPaymentJob" />
    	<property name="startDelay" value="${retry.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${retry.job.repeatIntervalMillis}" />
	</bean>
	
	<!-- Expired Payment task -->
	<bean id="expiredPaymentTask" class="mobi.nowtechnologies.server.job.CleanExpirePendingPaymentsJob">
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
		<property name="paymentSystems" ref="service.map.paymentSystems" />
	</bean>
	<bean id="expiredPaymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="expiredPaymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="expiredPaymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="expiredPaymentJob" />
    	<property name="startDelay" value="${expired.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${expired.job.repeatIntervalMillis}" />
	</bean>
	

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="autoStartup" value="${jobs.autoStartup}" />
		<property name="triggers">
			<list>
				<ref bean="paymentTrigger"/>
				<ref bean="retryPaymentTrigger" />
				<ref bean="expiredPaymentTrigger" />
				<ref bean="transport.notificationQuartzTrigger" />
<!--			
				<ref bean="transport.smsAccordingToLawNowTop40QuartzTrigger" />
				<ref bean="transport.smsAccordingToLawMetalHammerQuartzTrigger" />
-->
				
				<ref bean="transport.smsAccordingToLawSamsungQuartzTrigger" />
				<ref bean="transport.smsAccordingToLawChartsNowQuartzTrigger" />
				<ref bean="transport.smsAccordingToLawRunningTraxQuartzTrigger" />
				<ref bean="transport.smsAccordingToLawMoboQuartzTrigger" />
			</list>
		</property>
	</bean>
	
	<bean id="security.nowTechUserDetailsService" class="org.springframework.security.access.hierarchicalroles.UserDetailsServiceWrapper"/>
	
	<bean id="nowTechBasedRememberMeServices" class="mobi.nowtechnologies.server.security.NowTechTokenBasedRememberMeServices">
		<constructor-arg>
			<value>${rememberMe.key}</value>
		</constructor-arg>
		<constructor-arg>
			<ref bean="security.nowTechUserDetailsService" />
		</constructor-arg>
	</bean>
	
	<import resource="controllers.xml" />
</beans>
