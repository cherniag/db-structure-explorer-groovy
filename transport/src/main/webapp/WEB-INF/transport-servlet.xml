<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<mvc:interceptors>
        <bean class="mobi.nowtechnologies.server.interceptor.RequestInfoInterceptor" />
        <bean class="mobi.nowtechnologies.server.interceptor.LoggerInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/**/CONTEXT"/>
			<mvc:mapping path="/**/CONTEXT.json"/>
			<mvc:mapping path="/**/REFERRALS"/>
			<mvc:mapping path="/**/REFERRALS.json"/>
			<bean class="mobi.nowtechnologies.server.security.impl.spring.handler.AuthenticatingInterceptor">
				<property name="authenticationService">
					<bean class="mobi.nowtechnologies.server.security.impl.AuthenticationServiceImpl">
						<property name="userService" ref="service.UserService"/>
						<property name="pathVariableResolver" ref="pathVariableResolver"/>
					</bean>
				</property>
			</bean>
		</mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
                <property name="cacheSeconds" value="0"/>
                <property name="useExpiresHeader" value="true"/>
                <property name="useCacheControlHeader" value="true"/>
                <property name="useCacheControlNoStore" value="true"/>
            </bean>
        </mvc:interceptor>
	</mvc:interceptors>

	<mvc:annotation-driven>
       <mvc:argument-resolvers>
		   <bean class="mobi.nowtechnologies.server.security.impl.spring.method.annotation.AuthenticatedUserMethodArgumentResolver">
			   <property name="parameterType" value="mobi.nowtechnologies.server.persistence.domain.User"/>
		   </bean>
       </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <mvc:resources mapping="/MANIFEST.MF" location="classpath:version/MANIFEST.MF" />

    <context:annotation-config/>

	<bean id="pathVariableResolver" class="mobi.nowtechnologies.server.interceptor.PathVariableResolver"/>

    <bean class="mobi.nowtechnologies.server.transport.mvc.mapping.RESTRequestMappingHandlerMapping">
       <property name="order" value="#{ T(org.springframework.core.Ordered).HIGHEST_PRECEDENCE }"/>
    </bean>

	<!-- Application properties     -->
    <import resource="classpath:META-INF/placeholders.xml"/>

	<bean id="transport.JaxbMarshallingView" class="org.springframework.web.servlet.view.xml.MarshallingView">
		<constructor-arg ref="transport.JaxbMarshaller" />
	</bean>

	<bean id="transport.JaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>mobi.nowtechnologies.server.shared.dto.ChartDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.AccountLog</value>
				<value>mobi.nowtechnologies.server.shared.dto.AccountCheckDTO</value>
				<value>mobi.nowtechnologies.server.shared.dto.NewsDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.NewsDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.BonusChartDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.ChartDetailDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.Response</value>
				<value>mobi.nowtechnologies.server.shared.dto.DrmDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.DrmItemDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.SetPassword</value>
				<value>mobi.nowtechnologies.server.shared.dto.BuyTrackDto</value>
				<value>mobi.nowtechnologies.server.persistence.domain.ErrorMessage</value>
				<value>mobi.nowtechnologies.server.persistence.domain.payment.PaymentPolicy</value>
				<value>mobi.nowtechnologies.server.shared.dto.PromoCodeDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PurchasedChartDetailDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PurchasedChartDto</value>
				<value>mobi.nowtechnologies.server.transport.phonenumber.dto.PhoneActivationDto</value>
				<value>mobi.nowtechnologies.server.dto.transport.AccountCheckDto</value>
				<value>mobi.nowtechnologies.server.dto.transport.SelectedPlaylistDto</value>
				<value>mobi.nowtechnologies.server.dto.transport.LockedTrackDto</value>
				<value>mobi.nowtechnologies.server.shared.dto.PlaylistDto</value>
                <value>mobi.nowtechnologies.server.shared.dto.social.FacebookUserDetailsDto</value>
                <value>mobi.nowtechnologies.server.shared.dto.social.UserDetailsDto</value>
                <value>mobi.nowtechnologies.server.shared.dto.social.GooglePlusUserDetailsDto</value>
                <value>mobi.nowtechnologies.server.dto.streamzine.AccessPolicyDto</value>
                <value>mobi.nowtechnologies.server.dto.streamzine.DeeplinkValueItemDto</value>
                <value>mobi.nowtechnologies.server.dto.streamzine.IdListItemDto</value>
                <value>mobi.nowtechnologies.server.dto.streamzine.StreamzineUpdateDto</value>
                <value>mobi.nowtechnologies.server.dto.streamzine.VisualBlock</value>
                <value>mobi.nowtechnologies.server.transport.referrals.ReferralDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.ContextDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.ChartContextDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.ReferralsContextDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.ChartBehaviorDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.ChartBehaviorsDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.DurationDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.BehaviorTemplateDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.InstructionDto</value>
				<value>mobi.nowtechnologies.server.transport.context.dto.InstructionsDto</value>
			</list>
		</property>
	</bean>

   <bean id="contentNegotiationManagerFactoryBean" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
       <property name="defaultContentType" value="application/xml" />
       <property name="favorPathExtension" value="true" />
       <property name="mediaTypes">
       <map>
           <entry key="xml" value="application/xml"/>
           <entry key="json" value="application/json" />
       </map>
       </property>
   </bean>


    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="contentNegotiationManager" ref="contentNegotiationManagerFactoryBean"/>
        <property name="defaultViews">
            <list>
                <ref bean="transport.JaxbMarshallingView"/>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="disableCaching" value="false"/>
                    <property name="objectMapper">
                        <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                            <property name="serializationInclusion" value="NON_EMPTY"/>
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--
         ****************************************************************************
         ****************** Automatic job and thread-pool executors *****************
         ****************************************************************************
    -->
	
		<!--	Sms According To Law job-->
	<bean id="transport.smsAccordingToLawQuartzJobDetail"
		class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="mobi.nowtechnologies.server.job.SmsAccordingToLawJob" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="runningtrax" />
				<entry key="userService" value-ref="service.UserService" />
				<entry key="messageSource" value-ref="serviceMessageSource" />
				<entry key="migHttpService" value-ref="service.migHttpService" />
				<entry key="communityService" value-ref="service.communityService" />
			</map>
		</property>
	</bean>
	
	<bean id="transport.smsAccordingToLawO2QuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.smsAccordingToLawQuartzJobDetail" />
		<property name="startDelay"
			value="${smsAccordingToLawQuartzTrigger.startDelayMillis}" />
		<property name="repeatInterval"
			value="${smsAccordingToLawQuartzTrigger.repeatIntervalMillis}" />
		<property name="jobDataAsMap">
			<map merge="true">
				<entry key="communityURL" value="o2" />
			</map>
		</property>
	</bean>
	
	<!-- O2 sms notification job -->
	<bean id="transport.weeklyUpdateJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="service.WeeklyUpdateService" />
		<property name="targetMethod" value="updateWeekly" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="transport.smsNotificationQuartzTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="transport.weeklyUpdateJob" />
		<property name="startDelay" value="${smsNotification.startDelayMillis}" />
		<property name="repeatInterval" value="${smsNotification.repeatIntervalMillis}" />
	</bean>


	<bean id="paymentExecutor" class="mobi.nowtechnologies.server.job.executor.PendingPaymentExecutor">
		<property name="executor">
			<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
				<property name="corePoolSize" value="${executor.corePoolSize}" />
				<property name="maxPoolSize" value="${executor.maxPoolSize}" />
				<property name="queueCapacity" value="${executor.queueCapacity}" />
			</bean>
		</property>
		<property name="paymentSystems" ref="service.map.paymentSystems" />
	</bean>

	<!-- Payment task -->
	<bean id="paymentTask" class="mobi.nowtechnologies.server.job.CreatePendingPaymentJob">
		<property name="executor" ref="paymentExecutor" />
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
	</bean>
	<bean id="paymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="paymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="paymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="paymentJob" />
    	<property name="startDelay" value="${payment.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${payment.job.repeatIntervalMillis}" />
	</bean>
	
	<!-- Retry Payment task -->
	<bean id="retryPaymentTask" class="mobi.nowtechnologies.server.job.CreateRetryPaymentJob">
		<property name="executor" ref="paymentExecutor" />
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
	</bean>
	<bean id="retryPaymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="retryPaymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" /> 
	</bean>
	<bean id="retryPaymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="retryPaymentJob" />
    	<property name="startDelay" value="${retry.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${retry.job.repeatIntervalMillis}" />
	</bean>
	
	<!-- Expired Payment task -->
	<bean id="expiredPaymentTask" class="mobi.nowtechnologies.server.job.CleanExpirePendingPaymentsJob">
		<property name="pendingPaymentService" ref="service.PendingPaymentService" />
		<property name="paymentSystems" ref="service.map.paymentSystems" />
	</bean>
	<bean id="expiredPaymentJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="expiredPaymentTask" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="expiredPaymentTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="expiredPaymentJob" />
    	<property name="startDelay" value="${expired.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${expired.job.repeatIntervalMillis}" />
	</bean>
	
	<!-- Before 48H O2 PSMS Payment task -->
	<bean id="before48hPSMSPaymentJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="mobi.nowtechnologies.server.job.Before48hPSMSPaymentJob" />
	</bean>
	
	<bean id="before48hPSMSPaymentTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="before48hPSMSPaymentJob" />
		<property name="cronExpression" value="${before48h.expired.payment.job.cronExpression}" />
	</bean>

    <!-- Update O2 User Status Job -->
    <bean id="job.updateO2User" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="mobi.nowtechnologies.server.job.UpdateO2UserJob" />
    </bean>
    <bean id="job.UpdateO2UserTask" class="mobi.nowtechnologies.server.job.UpdateO2UserTask">
        <property name="userLogRepository" ref="userLogRepository"/>
        <property name="userService" ref="service.UserService"/>
        <property name="deviceService" ref="service.DevicePromotionsService"/>
        <property name="o2Service" ref="service.O2Service"/>
    </bean>
     
	<bean id="jobTrigger.updateO2User" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
    	<property name="jobDetail" ref="job.updateO2User" />
    	<property name="startDelay" value="${updateO2User.job.startDelayMillis}" />
    	<property name="repeatInterval" value="${updateO2User.job.repeatIntervalMillis}" />
	</bean>

    <!-- Send charge notification job -->
    <bean id="sendChargeNotificationJob" class="mobi.nowtechnologies.server.job.BusinessTaskJob">
        <property name="taskService" ref="task.TaskService" />
        <property name="processorContainer" ref="sendChargeNotificationProcessorContainer" />
        <property name="tasksCount" value="${task.job.tasks.count}" />
        <property name="executor" ref="sendChargeNotificationThreadExecutor" />
        <property name="supportedTaskTypes">
            <set>
                <value>SendChargeNotificationTask</value>
            </set>
        </property>
    </bean>

    <bean id="sendChargeNotificationTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail">
            <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                <property name="targetObject" ref="sendChargeNotificationJob" />
                <property name="targetMethod" value="execute" />
                <property name="concurrent" value="false" />
            </bean>
        </property>
        <property name="startDelay" value="${task.job.startDelayMillis}" />
        <property name="repeatInterval" value="${task.job.repeatIntervalMillis}" />
    </bean>
    <bean id="sendChargeNotificationThreadExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${task.job.executor.corePoolSize}"/>
        <property name="maxPoolSize" value="${task.job.executor.maxPoolSize}"/>
        <property name="queueCapacity" value="${task.job.executor.queueCapacity}"/>
    </bean>

    <!-- Send payment error notifications job -->

    <bean id="sendPaymentErrorNotificationJobDetails" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <bean class="mobi.nowtechnologies.server.job.BusinessTaskJob">
                <property name="taskService" ref="task.TaskService" />
                <property name="processorContainer" ref="sendPaymentErrorNotificationProcessorContainer" />
                <property name="tasksCount" value="${send.payment.error.job.tasks.count}" />
                <property name="executor">
                    <bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
                        <property name="corePoolSize" value="${send.payment.error.job.executor.corePoolSize}"/>
                        <property name="maxPoolSize" value="${send.payment.error.job.executor.maxPoolSize}"/>
                        <property name="queueCapacity" value="${send.payment.error.job.executor.queueCapacity}"/>
                    </bean>
                </property>
                <property name="supportedTaskTypes">
                    <set>
                        <value>SendUnsubscribeNotificationTask</value>
                        <value>SendPaymentErrorNotificationTask</value>
                    </set>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="execute" />
        <property name="concurrent" value="false" />
    </bean>
    <bean id="sendPaymentErrorNotificationTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="sendPaymentErrorNotificationJobDetails" />
        <property name="cronExpression" value="${send.payment.error.job.cron.expression}"/>
    </bean>

    <!-- Fork users job -->
    <bean id="job.ForkO2UsersForUpdateJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="mobi.nowtechnologies.server.job.ForkO2UsersForUpdateJob"/>
    </bean>
    
    <bean id="jobTrigger.ForkO2UsersForUpdateJob" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="job.ForkO2UsersForUpdateJob"/>
        <property name="cronExpression" value="${jobs.default.cron.expression}"/>
    </bean>

    <bean id="transport.sendSmsJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="mobi.nowtechnologies.server.job.SendSMSQuartzJobBean" />
        <property name="jobDataAsMap">
            <map merge="true">
                <entry key="communityURL" value="vf_nz" />
                <entry key="paymentDetailsFetchSize" value="1000" />
                <entry key="paymentDetailsRepository" value-ref="paymentDetailsRepository"/>
                <entry key="userNotificationService" value-ref="service.UserNotificationService"/>
            </map>
        </property>
    </bean>

    <bean id="sendSmsForVFNZUsersTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="transport.sendSmsJob"/>
        <property name="cronExpression" value="${send.sms.for.vf_nz.users.job.cron.expression}"/>
        <property name="jobDataAsMap">
            <map merge="true">
                <entry key="communityURL" value="vf_nz" />
            </map>
        </property>
    </bean>

    <bean id="schedulerTX" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
        <property name="applicationContextSchedulerContextKey" value="applicationContext" />
        <property name="dataSource" ref="persistence.DataSource"/>
        <property name="transactionManager" ref="persistence.TransactionManager"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="autoStartup" value="${jobs.autoStartup}" />
        <property name="triggers">
            <list>
                <ref bean="jobTrigger.updateO2User"/>
                <ref bean="jobTrigger.ForkO2UsersForUpdateJob"/>
            </list>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">MQBatchScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">10000</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">5</prop>
                <prop key="org.quartz.threadPool.threadPriority">1</prop>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
            </props>
        </property>
    </bean>

    <bean class="mobi.nowtechnologies.server.job.SpringContext"/>

    <!-- NON_CLUSTERED JOBS-->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="autoStartup" value="${jobs.autoStartup}" />
		<property name="triggers">
			<list>
				<ref bean="paymentTrigger"/>
				<ref bean="retryPaymentTrigger" />
				<ref bean="expiredPaymentTrigger" />
				<ref bean="transport.smsAccordingToLawO2QuartzTrigger" />
				<ref bean="transport.smsNotificationQuartzTrigger" />
				<ref bean="before48hPSMSPaymentTrigger"/>
                <ref bean="sendSmsForVFNZUsersTrigger"/>
                <ref bean="sendChargeNotificationTrigger"/>
                <ref bean="sendPaymentErrorNotificationTrigger"/>
			</list>
		</property>
	</bean>

	<!-- Transport only service -->
	<bean id="throttlingService" class="mobi.nowtechnologies.server.service.impl.ThrottlingServiceImpl">
		<property name="memcachedClient">
			<bean class="net.spy.memcached.MemcachedClient">
				<constructor-arg>
					<bean class="java.net.InetSocketAddress">
						<constructor-arg index="0" value="${throttling.host}" />
						<constructor-arg index="1" value="${throttling.port}" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
	</bean>
    <bean id="taskThreadPoolExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"/>

    <bean id="accCheckService" class="mobi.nowtechnologies.server.service.AccCheckService"/>

    <import resource="classpath:controllers.xml" />

    <beans profile="application-tests">
        <bean id="jobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="autoStartup" value="${jobs.autoStartup}" />
            <property name="triggers">
                <list>
                    <ref bean="paymentTrigger"/>
                    <ref bean="retryPaymentTrigger" />
                    <ref bean="expiredPaymentTrigger" />
                    <ref bean="transport.smsAccordingToLawO2QuartzTrigger" />
                    <ref bean="transport.smsNotificationQuartzTrigger" />
                    <ref bean="before48hPSMSPaymentTrigger"/>
                    <ref bean="sendSmsForVFNZUsersTrigger"/>
                    <ref bean="sendChargeNotificationTrigger"/>
                    <ref bean="sendPaymentErrorNotificationTrigger"/>
                    <ref bean="jobTrigger"/>
                </list>
            </property>
        </bean>

        <bean id="jobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
            <property name="jobDetail" ref="ftJobDetail"/>
            <property name="name" value="triggerName" />
            <property name="jobName" value="jobName"/>
            <property name="startDelay" value="${jobTrigger.job.startDelayMillis}" />
            <property name="repeatInterval" value="${jobTrigger.job.repeatIntervalMillis}" />
        </bean>

        <bean id="ftJobDetail" class="org.springframework.scheduling.quartz.JobDetailBean">
            <property name="jobClass" value="mobi.nowtechnologies.server.job.AppTestManageJobsBean" />
            <property name="jobDataAsMap">
                <map merge="true">
                    <entry key="jobTriggerRequestRepository" value-ref="jobTriggerRequestRepository" />
                </map>
            </property>
        </bean>

</beans>
</beans>
